name: "publish"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  # publish-desktop:
  #   permissions:
  #     contents: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - platform: "macos-latest" # for Arm based macs (M1 and above).
  #           args: "--target aarch64-apple-darwin"
  #         - platform: "macos-latest" # for Intel based macs.
  #           args: "--target x86_64-apple-darwin"
  #         - platform: "ubuntu-latest"
  #           args: ""
  #         - platform: "windows-latest"
  #           args: ""

  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*

  #     - name: install Rust stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,aarch64-apple-ios'  || '' }}

  #     - name: install dependencies (ubuntu only)
  #       if: matrix.platform == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

  #     - name: install frontend dependencies
  #       run: npm install

  #     - uses: tauri-apps/tauri-action@v0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
  #         releaseName: "App v__VERSION__"
  #         releaseBody: "See the assets to download this version and install."
  #         releaseDraft: true
  #         prerelease: false
  #         args: ${{ matrix.args }}

  #     - name: Upload Linux Artifacts
  #       if: matrix.platform == 'ubuntu-latest'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-linux
  #         path: |
  #           src-tauri/target/release/bundle/deb/*.deb
  #           src-tauri/target/release/bundle/rpm/*.rpm
  #           src-tauri/target/release/bundle/appimage/*.AppImage
  #     - name: Upload Windows Artifacts
  #       if: matrix.platform == 'windows-latest'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-windows
  #         path: |
  #           src-tauri/target/release/bundle/msi/*.msi
  #           src-tauri/target/release/bundle/nsis/*.exe

  #     - name: Upload macOS Artifacts (x86_64)
  #       if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-macos-x86_64
  #         path: |
  #           src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app
  #           src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg

  #     - name: Upload macOS Artifacts (ARM/M1)
  #       if: matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-macos-arm
  #         path: |
  #           src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app
  #           src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
  # publish-android:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: lts/*

  #     - name: Setup Java
  #       uses: actions/setup-java@v4
  #       with:
  #         distribution: "zulu"
  #         java-version: "17"

  #     - name: install Rust stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

  #     - name: install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

  #     - name: install frontend dependencies
  #       run: npm install

  #     - name: Setup Android SDK
  #       uses: android-actions/setup-android@v3

  #     - name: Install NDK
  #       run: sdkmanager "ndk;27.0.11902837"

  #     - name: Init tauri android
  #       run: npm run tauri android init

  #     - name: Build app bundle
  #       run: npm run tauri android build
  #       env:
  #         NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837

  #     - name: Upload Android Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-android
  #         path: |
  #           src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk
  #           src-tauri/gen/android/app/build/outputs/bundle/universalRelease/*.aab
  publish-ios:
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      APPLE_DEVELOPMENT_TEAM: "1234567890"
      BUNDLE_IDENTIFIER: "com.atm.app"
      IOS_MOBILE_PROVISION: "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KICAgICAgICAgIDwhRE9DVFlQRSBwbGlzdCBQVUJMSUMgIi0vL0FwcGxlLy9EVEQgUExJU1QgMS4wLy9FTiIgImh0dHA6Ly93d3cuYXBwbGUuY29tL0RURHMvUHJvcGVydHlMaXN0LTEuMC5kdGQiPgogICAgICAgICAgPHBsaXN0IHZlcnNpb249IjEuMCI+CiAgICAgICAgICA8ZGljdD4KICAgICAgICAgICAgICA8a2V5PkFwcElETmFtZTwva2V5PgogICAgICAgICAgICAgIDxzdHJpbmc+JHt7IGVudi5CVU5ETEVfSURFTlRJRklFUiB9fTwvc3RyaW5nPgogICAgICAgICAgICAgIDxrZXk+VGVhbUlEPC9rZXk+CiAgICAgICAgICAgICAgPHN0cmluZz4ke3sgZW52LkFQUExFX0RFVkVMT1BNRU5UX1RFQU0gfX08L3N0cmluZz4KICAgICAgICAgICAgICA8a2V5PlVVSUQ8L2tleT4KICAgICAgICAgICAgICA8c3RyaW5nPiR7VVVJRH08L3N0cmluZz4KICAgICAgICAgIDwvZGljdD4KICAgICAgICAgIDwvcGxpc3Q+"
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install frontend dependencies
        run: npm install

      - name: Add the iOS targets with rustup
        run: rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim

      - name: Install homebrew
        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      - name: Install cocoapods
        run: brew install cocoapods

      - name: Init tauri ios
        env:
          DEVELOPMENT_TEAM: "1234567890"
        run: npm run tauri ios init

      - name: Generate Local Provisioning Profile
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          UUID=$(uuidgen)
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/${UUID}.mobileprovision"
          cat <<EOF > "$PROFILE_PATH"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>AppIDName</key>
              <string>${{ env.BUNDLE_IDENTIFIER }}</string>
              <key>TeamID</key>
              <string>${{ env.APPLE_DEVELOPMENT_TEAM }}</string>
              <key>UUID</key>
              <string>${UUID}</string>
          </dict>
          </plist>
          EOF

      - name: Build app bundle
        run: npm run tauri ios dev 'iPhone 15' --open
